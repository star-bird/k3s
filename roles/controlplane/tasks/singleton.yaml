---
# vim: filetype=ansible.yaml
# The singleton is any already running k3s controlplane node.  Mostly we
# just need to have the correct node token to use on any other control
# plane node, because we initialize everything on the first one and then
# all other control plane nodes will join on the running node for the
# initial setup.
#
# Otherwise they won't be able to communicate and you'd have three
# isolated control planes, not a single HA control plane.

- name: Copy Jinja template
  ansible.builtin.template:
    src: "singleton.config.yaml.j2"
    dest: /etc/rancher/k3s/config.yaml
    owner: root
    group: root
    mode: '0644'

- name: Copy K3s service file
  ansible.builtin.template:
    src: "k3s.service.j2"
    dest: "/etc/systemd/system/k3s.service"
    owner: root
    group: root
    mode: '0644'

- name: Enable and check K3s service
  any_errors_fatal: true
  ansible.builtin.systemd:
    name: k3s
    daemon_reload: true
    state: restarted
    enabled: true

- name: Update node facts after k3s adds tailscale
  ansible.builtin.setup:
    filter: 'ansible_tailscale0'

- name: Store controlplane IP address
  ansible.builtin.set_fact:
    controlplane_ip: "{{ controlplane_api_ip | default(hostvars[inventory_hostname].ansible_tailscale0.ipv4.address) }}"
  delegate_to: "{{ controlplane_item }}"
  delegate_facts: true
  loop: "{{ groups[controlplane_cluster_name] }}"
  loop_control:
    loop_var: controlplane_item
